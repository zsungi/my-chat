{"version":3,"sources":["Proxy.ts","EventProducer.ts","TextInput.tsx","Login.tsx","TextInputAndButton.tsx","ConversationCard.tsx","Leftpane.tsx","MessageCard.tsx","RightPane.tsx","Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["proxy","ws","inbox","WebSocket","addEventListener","e","p","JSON","parse","data","type","alert","message","dispatch","cid","channelId","conversations","find","x","lastMessages","push","conversation","packet","this","send","stringify","email","password","displayName","staySignedIn","registrationData","sendPacket","listeners","listener","obj","splice","findIndex","args","filter","call","Error","TextInput","state","value","props","focus","attrs","autofocus","autoFocus","onEnter","onKeyDown","keyCode","className","onChange","setState","target","onBlur","onFocus","placeholder","Component","Login","register","displayKey","src","width","href","onClick","preventDefault","TextInputAndButton","textInput","React","createRef","current","ref","buttonContent","ConversationCard","m","forceUpdate","removeAllEventListener","lastMessage","length","selected","onSelect","name","Date","timeStamp","toLocaleDateString","content","LeftPane","firstMessage","c","user","tag","text","sendContactRequest","map","key","selectedConversation","MessageCard","own","toLocaleTimeString","PureComponent","RightPane","referenceTo","contentType","onBack","id","senderId","onSend","Main","undefined","App","showLogin","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","fetch","headers","response","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"yOAuDWA,EAAQ,I,kDA1Cf,aACC,IAAD,8BACI,gBAJIC,QAGR,IAFAC,MAAyB,KAIrB,EAAKD,GAAK,IAAIE,UAAW,+BAEzB,EAAKF,GAAGG,iBAAkB,WAAW,SAAAC,GACpC,IAAD,EACQC,EAAoBC,KAAKC,MAAOH,EAAEI,MACtC,OAASH,EAAEI,MAEP,IAAK,QACDC,MAAOL,EAAEM,SACT,MACJ,IAAK,QACD,EAAKV,MAAQI,EAAEJ,MACf,EAAKW,SAAU,SACf,MACJ,IAAK,UACD,IAAIC,EAAMR,EAAES,UACZ,EAAKF,SAAU,UAAWC,EAAKR,EAAEM,SACjC,YAAKV,MAAOc,cAAcC,MAAM,SAAAC,GAAC,OAAIA,EAAEH,YAAcD,YAArD,SAA4DK,aAAaC,KAAMd,EAAEM,SACjF,MACJ,IAAK,oBACD,EAAKV,MAAOc,cAAcI,KAAMd,EAAEe,cAClC,EAAKR,SAAU,eAAgBP,EAAEe,aAAaN,eAvB9D,E,uDA4BmBO,GAEfC,KAAKtB,GAAGuB,KAAMjB,KAAKkB,UAAWH,M,+BAElBI,EAAeC,EAAkBC,EAAqBC,GAElE,IAAIC,EAAmB,CAAEpB,KAAM,WAAYgB,QAAOC,WAAUC,cAAaC,gBACzEN,KAAKQ,WAAWD,O,GCjDxB,iDAEYE,UAAyD,GAFrE,6DAGyCtB,EAASuB,EAAkBC,GAE5DX,KAAKS,UAAUZ,KAAK,CAAEV,OAAMuB,WAAUC,UAL9C,0CAO2CxB,EAASuB,GAE5CV,KAAKS,UAAUG,OAAOZ,KAAKS,UAAUI,WAAU,SAAAlB,GAAC,OAAIA,EAAER,OAASA,GAAQQ,EAAEe,WAAaA,KAAW,KATzG,+BAWuBvB,GAClB,IAAD,uBADoC2B,EACpC,iCADoCA,EACpC,sCACyBd,KAAKS,UAAUM,QAAO,SAAApB,GAAC,OAAIA,EAAER,OAASA,MAD/D,IACI,kCAASuB,EAAT,SAAkE,EAAAA,EAASA,UAASM,KAAlB,SAAuBN,EAASC,KAAhC,OAAwCG,KAD9G,iCAZJ,6CAe4BH,GAEpB,IAAMA,EACF,MAAM,IAAIM,MAAO,uBACrBjB,KAAKS,UAAYT,KAAKS,UAAUM,QAAQ,SAAApB,GAAC,OAAIA,EAAEgB,MAAQA,SAnB/D,OCkBaO,G,MAAb,4MACIC,MAAQ,CAAEC,MAAO,EAAKC,MAAMD,MAAOE,OAAO,GAD9C,uDAGK,IAAD,SACQC,EAAQ,GAKZ,OAJIvB,KAAKqB,MAAMG,YAAWD,EAAME,WAAY,GACxCzB,KAAKqB,MAAMK,UAASH,EAAMI,UAAY,SAAA7C,GACpB,KAAdA,EAAE8C,SAAgB,EAAKP,MAAMK,YAGjC,yBAAKG,UAAU,cACX,2CAAWN,EAAX,CAAkBpC,KAAI,UAAEa,KAAKqB,MAAMlC,YAAb,QAAqB,OAAQiC,MAAOpB,KAAKmB,MAAMC,MAAOU,SAAU,SAAAhD,GAAM,IAAD,IACvF,EAAKiD,SAAS,CAAEX,MAAOtC,EAAEkD,OAAOZ,QAChC,eAAKC,OAAMS,gBAAX,gBAAsBhD,EAAEkD,OAAOZ,QAE/Ba,OAAQ,kBAAM,EAAKF,SAAS,CAAET,OAAO,KACrCY,QAAS,kBAAM,EAAKH,SAAS,CAAET,OAAO,QAC1C,yBAAKO,UAAU,oBACf,2BAAOA,UAAW7B,KAAKmB,MAAMC,OAASpB,KAAKmB,MAAMG,MAAQ,WAAa,IACjEtB,KAAKqB,MAAMc,kBAnBhC,GAA+BC,cCdlBC,EAAb,4MACIlB,MAAQ,CAAEhB,MAAO,GAAIC,SAAU,GAAIC,YAAa,GAAIiC,UAAU,GADlE,EAEIC,WAAa,GAFjB,uDAGc,IAAD,OACL,OACI,yBAAKV,UAAU,SACX,yBAAKW,IAAI,cAAcC,MAAM,QAC7B,2BAAIzC,KAAKmB,MAAMmB,SAAW,kBAAoB,+BAC1C,uBAAGI,KAAK,GAAGC,QAAS,SAAA7D,GAAOA,EAAE8D,iBAAkB,EAAKb,SAAS,CAAEO,UAAW,EAAKnB,MAAMmB,aAChFtC,KAAKmB,MAAMmB,SAAW,QAAU,WADrC,MAGHtC,KAAKmB,MAAMmB,UACR,2BAAOnD,KAAK,OAAOgD,YAAY,6BAA6Bf,MAAOpB,KAAKmB,MAAMd,YAC1EyB,SAAU,SAAAhD,GAAC,OAAI,EAAKiD,SAAS,CAAE1B,YAAavB,EAAEkD,OAAOZ,WAC9D,kBAAC,EAAD,CAAWjC,KAAK,QAAQgD,YAAY,8BACff,MAAOpB,KAAKmB,MAAMhB,MAClB2B,SAAU,SAAAhD,GAEN,EAAKyD,WAAazD,EACV,UAALA,IAEC,EAAKqC,MAAMd,YAAc,mBAE7B,EAAK0B,SAAS,CAAC5B,MAAOrB,KAE1B4C,QAAS,kBAAM,EAAKiB,WAAWnB,WAAW,IAC9D,kBAAC,EAAD,CAAWrC,KAAK,WAAWgD,YAAY,WAAWf,MAAOpB,KAAKmB,MAAMf,SAAU0B,SAAU,SAAAhD,GAAC,OAAI,EAAKiD,SAAS,CAAE3B,SAAUtB,KAAM4C,QAAS,kBAAM,EAAKiB,aACjJ,4BAAQxD,KAAK,SAASwD,QAAS,kBAAM,EAAKA,YACrC3C,KAAKmB,MAAMmB,SAAW,WAAa,SAExC,uBAAGI,KAAK,0CAAR,qBA9BhB,gCAkCY1C,KAAKmB,MAAMmB,SACX7D,EAAM+B,WAAW,CACbrB,KAAM,WAAYgB,MAAOH,KAAKmB,MAAMhB,MAAOC,SAAUJ,KAAKmB,MAAMf,SAChEC,YAAaL,KAAKmB,MAAMd,YAAaC,cAAc,IAGvD7B,EAAM+B,WAAW,CAAErB,KAAM,QAASgB,MAAOH,KAAKmB,MAAMhB,MAAOC,SAAUJ,KAAKmB,MAAMf,SAAUE,cAAc,QAxCpH,GAA2B8B,aCDdS,EAAb,4MACIC,UAAYC,IAAMC,YADtB,wDAEe,IAAD,WACN,WAAI,EAAAhD,KAAKqB,OAAMsB,eAAf,aAAI,6BAAqB3C,KAAK8C,UAAUG,eAApC,aAAqB,EAAwB9B,MAAMC,aAAnD,QAA4D,OAChE,UAAApB,KAAK8C,UAAUG,eAAf,SAAwBlB,SAAS,CAAEX,MAAO,QAJlD,+BAMc,IAAD,OACL,OACI,yBAAKS,UAAU,yBACX,kBAAC,EAAD,iBAAe7B,KAAKqB,MAApB,CAA2B6B,IAAKlD,KAAK8C,UAAWpB,QAAS,kBAAM,EAAKiB,cACpE,4BAAQxD,KAAK,SAASwD,QAAS,kBAAM,EAAKA,YACrC3C,KAAKqB,MAAM8B,oBAXhC,GAAwCf,aCE3BgB,EAAb,kLAKyB,IAAD,OAChB3E,EAAMI,iBAAiB,WAAW,SAACU,EAAK8D,GAChC9D,IAAQ,EAAK8B,MAAMvB,aAAaN,WAAW,EAAK8D,gBACrDtD,QARX,6CAWQvB,EAAM8E,uBAAuBvD,QAXrC,+BAac,IAAD,OACDwD,EAAcxD,KAAKqB,MAAMvB,aAAaF,aAAa6D,OAAS,EAC5DzD,KAAKqB,MAAMvB,aAAaF,aAAaI,KAAKqB,MAAMvB,aAAaF,aAAa6D,OAAS,GAAK,KAC5F,OACI,yBAAK5B,UAAW,qBAAuB7B,KAAKqB,MAAMqC,SAAW,YAAc,IACvEf,QAAS,kBAAM,EAAKtB,MAAMsC,aAD9B,IAC2C,yBAAK9B,UAAU,OAClD,0BAAMA,UAAU,gBAAgB7B,KAAKqB,MAAMvB,aAAa8D,MADrB,IACkC,0BAAM/B,UAAU,QAChF2B,GAAe,IAAIK,KAAKL,EAAYM,WAAWC,qBADiB,MAGzE,0BAAMlC,UAAU,gBAAhB,OAAgC2B,QAAhC,IAAgCA,OAAhC,EAAgCA,EAAaQ,SALjD,SAjBZ,GAAsC5B,aCEzB6B,EAAb,iLAGuB9D,GAEf,OADA1B,EAAM+B,WAAW,CAAErB,KAAM,iBAAkBgB,QAAO+D,aAAc,WACzD,IALf,0CAQyB,IAAD,OAChBzF,EAAMI,iBAAiB,gBAAgB,SAAAsF,GAAC,OAAI,EAAKb,gBAAetD,QATxE,6CAYQvB,EAAM8E,uBAAuBvD,QAZrC,+BAcc,IAAD,OACL,OACI,yBAAK6B,UAAU,aACX,uBAAGA,UAAU,UAAb,WAA+B7B,KAAKqB,MAAM1C,MAAMyF,KAAKC,KADzD,IACkE,kBAAC,EAAD,CAAoBlF,KAAK,OAAOgD,YAAY,6BACtGgB,cAAc,MACdR,QAAS,SAAA2B,GAAI,OAAI,EAAKC,mBAAmBD,MAHjD,IAG2D,yBAAKzC,UAAU,iBACjE7B,KAAKqB,MAAM1C,MAAMc,cAAc+E,KAAI,SAAA7E,GAAC,OAAI,kBAAC,EAAD,CACrC8E,IAAK9E,EAAEH,UACPM,aAAcH,EACd+D,SAAU/D,IAAM,EAAK0B,MAAMqD,qBAAsBf,SAAU,kBAAM,EAAKtC,MAAMsC,SAAShE,UAPjG,SAhBZ,GAA8ByC,aCHjBuC,EAAb,uKAEQ,OACI,yBAAK9C,UAAW,gBAAkB7B,KAAKqB,MAAMuD,IAAM,OAAS,KACxD,yBAAK/C,UAAU,UACX,0BAAMA,UAAU,QAAQ7B,KAAKqB,MAAMhC,QAAQ2E,SAD/C,IAC+D,0BAAMnC,UAAU,QACtE,IAAIgC,KAAK7D,KAAKqB,MAAMhC,QAAQyE,WAAWe,qBADe,MAFnE,SAHZ,GAAiCC,iBCGpBC,EAAb,qLAEQtG,EAAM8E,uBAAuBvD,QAFrC,6BAIWsE,GAEH,OADA7F,EAAM+B,WAAW,CAAErB,KAAM,UAAWK,UAAWQ,KAAKqB,MAAMvB,aAAcN,UAAWwF,YAAa,EAAGC,YAAa,EAAGjB,QAAS,MAAQM,KAC7H,IANf,0CAQyB,IAAD,OAChB7F,EAAMI,iBAAiB,WAAW,SAACU,EAAK8D,GAAO,IAAD,EACtC9D,KAAG,UAAK,EAAK8B,MAAMvB,oBAAhB,aAAK,EAAyBN,YAAW,EAAK8D,gBACtDtD,QAXX,+BAac,IAAD,WACL,OACI,yBAAK6B,UAAU,qBACV7B,KAAKqB,MAAMvB,cAAgB,oCACxB,yBAAK+B,UAAU,2BACX,4BAAQ1C,KAAK,SAAS0C,UAAU,cAChCc,QAAS,kBAAM,EAAKtB,MAAM6D,WAD1B,QADJ,IAEsD,qCAAIlF,KAAKqB,MAAMvB,oBAAf,aAAI,EAAyB8D,OAEnF,yBAAK/B,UAAU,YAAf,UACK7B,KAAKqB,MAAMvB,oBADhB,aACK,EAAyBF,aAAa4E,KAAI,SAAA7E,GAAC,aAAI,kBAAC,EAAD,CAAa8E,IAAK9E,EAAEwF,GAAI9F,QAASM,EAC7EiF,IAAKjF,EAAEyF,YAAF,UAAe3G,EAAME,aAArB,aAAe,EAAayF,KAAKe,SAF9C,KAGA,yBAAKtD,UAAU,oBACX,kBAAC,EAAD,CAAoB1C,KAAK,OAAOgD,YAAY,iCACxCgB,cAAc,OAAOR,QAAS,SAAAhD,GAAC,OAAI,EAAK0F,OAAO1F,MAFvD,WAxBpB,GAA+ByC,aCAlBkD,EAAb,4MACInE,MAAQ,CAAEuD,0BAAsBa,GADpC,uDAEc,IAAD,OACD1D,EAAY,aAAe7B,KAAKmB,MAAMuD,qBAAuB,QAAU,QAC3E,OACI,yBAAK7C,UAAWA,GACZ,kBAAC,EAAD,CACAlD,MAAOF,EAAME,MACb+F,qBAAsB1E,KAAKmB,MAAMuD,qBAAsBf,SAAU,SAAAQ,GAAC,OAAI,EAAKpC,SAAS,CAAE2C,qBAAsBP,OAC5G,kBAAC,EAAD,CAAWrE,aAAcE,KAAKmB,MAAMuD,qBAChCQ,OAAQ,kBAAM,EAAKnD,SAAS,CAAE2C,0BAAsBa,YAVxE,GAA0BnD,aCFLoD,E,4MAEnBrE,MAAQ,CAAEsE,WAAW,G,kEAGpB,IAAD,OACEhH,EAAMI,iBAAkB,SAAS,kBAAM,EAAKkD,SAAU,CAAE0D,WAAW,S,+BAKnE,OACE,yBAAK5D,UAAU,OACX7B,KAAKmB,MAAMsE,UAAY,kBAAC,EAAD,MAAY,kBAAC,EAAD,W,GAbZrD,aCO3BsD,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA8CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACP9D,SAAS2D,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBrF,QACfgF,UAAUC,cAAcO,YAI1BC,QAAQC,IACN,iHAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlBM,QAAQC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,WAO5BU,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MClGjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiBnB,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAIoB,IACpBC,IACA5B,OAAOC,SAASnD,MAEJ+E,SAAW7B,OAAOC,SAAS4B,OAIvC,OAGF7B,OAAO/G,iBAAiB,QAAQ,WAC9B,IAAMoH,EAAK,UAAMuB,IAAN,sBAEP9B,IAgEV,SAAiCO,EAAeC,GAE9CwB,MAAMzB,EAAO,CACX0B,QAAS,CAAE,iBAAkB,YAE5BtB,MAAK,SAAAuB,GAEJ,IAAM3C,EAAc2C,EAASD,QAAQE,IAAI,gBAEnB,MAApBD,EAASE,QACO,MAAf7C,IAA8D,IAAvCA,EAAY8C,QAAQ,cAG5C5B,UAAUC,cAAc4B,MAAM3B,MAAK,SAAAC,GACjCA,EAAa2B,aAAa5B,MAAK,WAC7BT,OAAOC,SAASqC,eAKpBlC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACLJ,QAAQC,IACN,oEAvFAsB,CAAwBlC,EAAOC,GAI/BC,UAAUC,cAAc4B,MAAM3B,MAAK,WACjCO,QAAQC,IACN,iHAMJb,EAAgBC,EAAOC,OC1C/BE,I","file":"static/js/main.3ccf87c2.chunk.js","sourcesContent":["import { IncomingPacket, OutgoingPacket, InboxDto, MessageDto } from '../chat';\nimport { EventProducer } from './EventProducer';\n\ninterface ProxyEventMap {\n    \"login\": () => void;\n    \"message\": ( channelId: string, message: MessageDto ) => void;\n    \"conversation\": ( channelId: string ) => void;\n    }\n\nclass Proxy extends EventProducer<ProxyEventMap>\n{\n    private ws: WebSocket;\n    inbox: InboxDto | null = null;\n    constructor()\n    {\n        super();\n        this.ws = new WebSocket( \"wss://raja.aut.bme.hu/chat/\" );\n        \n        this.ws.addEventListener( \"message\", e =>\n        {\n            let p = <IncomingPacket>JSON.parse( e.data ); \n            switch ( p.type )\n            {\n                case \"error\":\n                    alert( p.message );\n                    break;\n                case \"login\":\n                    this.inbox = p.inbox;\n                    this.dispatch( \"login\" );\n                    break;\n                case \"message\":\n                    let cid = p.channelId;\n                    this.dispatch( \"message\", cid, p.message );\n                    this.inbox!.conversations.find( x => x.channelId === cid )?.lastMessages.push( p.message );\n                    break;\n                case \"conversationAdded\":\n                    this.inbox!.conversations.push( p.conversation );\n                    this.dispatch( \"conversation\", p.conversation.channelId );\n                    break;\n            }\n        } );\n    }\n    public sendPacket( packet: OutgoingPacket )\n    {\n        this.ws.send( JSON.stringify( packet ) );\n    }\n    public register(email: string, password: string, displayName: string, staySignedIn: boolean)\n    {        \n        var registrationData = { type: \"register\", email, password, displayName, staySignedIn} as OutgoingPacket;\n        this.sendPacket(registrationData); \n    }\n\n}\n\n\nexport var proxy = new Proxy();","export class EventProducer<M>\n{\n    private listeners: { type: keyof M, listener, obj?: Object }[] = [];\n    addEventListener<K extends keyof M>( type: K, listener: M[ K ], obj?: Object )\n    {\n        this.listeners.push({ type, listener, obj });\n    }\n    removeEventListener<K extends keyof M>(type: K, listener: M[K])\n    {\n        this.listeners.splice(this.listeners.findIndex(x => x.type === type && x.listener === listener), 1);\n    }\n    protected dispatch(type: string, ...args)\n    {\n        for (let listener of this.listeners.filter(x => x.type === type)) listener.listener.call(listener.obj, ...args);\n    }\n    removeAllEventListener( obj?: Object )\n    {\n        if ( !obj )\n            throw new Error( \"Must specify object\" );\n        this.listeners = this.listeners.filter( x => x.obj !== obj );\n    }\n}\n\n","import React, { Component } from 'react';\nimport './TextInput.css';\n\nexport interface TextInputOptions {\n    value?: string;\n    onChange?: (value: string) => void;\n    type?: \"text\" | \"password\" | \"email\";\n    placeholder?: string;\n    onEnter?: () => void;\n    autofocus?: boolean;\n};\n\nexport interface TextInputAndButtonOptions extends TextInputOptions {\n    buttonContent?: string;\n    onClick?: (text: string) => boolean | void;\n}\n\n\nexport class TextInput extends Component<TextInputOptions> {\n    state = { value: this.props.value, focus: false };\n    render()\n    {\n        let attrs = {} as any;\n        if (this.props.autofocus) attrs.autoFocus = true;\n        if (this.props.onEnter) attrs.onKeyDown = e => {\n            if (e.keyCode === 13) this.props.onEnter!();\n        };\n        return (\n            <div className=\"text-input\">\n                <input {...attrs} type={this.props.type ?? \"text\"} value={this.state.value} onChange={e => {\n                    this.setState({ value: e.target.value });\n                    this.props.onChange?.(e.target.value);\n                }}\n                    onBlur={() => this.setState({ focus: false })}\n                    onFocus={() => this.setState({ focus: true })} />\n                <div className=\"focus-indicator\"></div>\n                <label className={this.state.value || this.state.focus ? \"subsided\" : \"\"}>\n                    {this.props.placeholder}\n                </label>\n            </div>);\n    }\n}\n","import React, { Component } from 'react';\nimport { proxy } from './Proxy';\nimport { TextInput } from './TextInput';\n\nexport class Login extends Component {\n    state = { email: \"\", password: \"\", displayName: \"\", register: false };\n    displayKey = \"\";  \n    render() {\n        return (\n            <div className=\"login\">\n                <img src=\"logo512.png\" width=\"256\" />\n                <p>{this.state.register ? \"Switch back to \" : \"Have no account yet? Go and \"}\n                    <a href=\"\" onClick={e => { e.preventDefault(); this.setState({ register: !this.state.register }); }}>\n                        {this.state.register ? \"Login\" : \"Register\"} </a>\n                </p>\n                {this.state.register &&\n                    <input type=\"text\" placeholder=\"Display Name (Agent Smith)\" value={this.state.displayName}\n                        onChange={e => this.setState({ displayName: e.target.value })} />}\n               <TextInput type=\"email\" placeholder=\"Email (someone@example.com)\" \n                                    value={this.state.email} \n                                    onChange={e => \n                                    {\n                                        this.displayKey = e;\n                                        if(e == \"AUKIM7\")\n                                        {\n                                            this.state.displayName = \"Kégl Marcell\";                                               \n                                        }\n                                        this.setState({email: e})}\n                                    }\n                                    onEnter={() => this.onClick()} autofocus={true}/>   \n                <TextInput type=\"password\" placeholder=\"Password\" value={this.state.password} onChange={e => this.setState({ password: e })} onEnter={() => this.onClick()} />\n                <button type=\"button\" onClick={() => this.onClick()}>\n                    {this.state.register ? \"Register\" : \"Login\"}\n                </button>\n                <a href=\"https://www.google.hu/search?q=privacy\">Privacy Policy</a>\n            </div>);\n    }\n    onClick() {\n        if (this.state.register)\n            proxy.sendPacket({\n                type: \"register\", email: this.state.email, password: this.state.password,\n                displayName: this.state.displayName, staySignedIn: false\n            });\n        else\n            proxy.sendPacket({ type: \"login\", email: this.state.email, password: this.state.password, staySignedIn: false });\n    }\n}\n\n","import { TextInputAndButtonOptions, TextInput } from './TextInput';\nimport React, { Component } from 'react';\n\nexport class TextInputAndButton extends Component<TextInputAndButtonOptions> {\n    textInput = React.createRef<TextInput>();\n    onClick() {\n        if (this.props.onClick?.(this.textInput.current?.state.value ?? \"\"))\n        this.textInput.current?.setState({ value: \"\" });\n    }\n    render() {\n        return (\n            <div className=\"text-input-and-button\">\n                <TextInput {...this.props} ref={this.textInput} onEnter={() => this.onClick()} />\n                <button type=\"button\" onClick={() => this.onClick()}>\n                    {this.props.buttonContent}\n                </button>\n            </div>\n        );\n    }\n}","import { ConversationDto } from \"../chat\";\nimport { Component } from \"react\";\nimport React from \"react\";\nimport { proxy } from \"./Proxy\";\n\nexport class ConversationCard extends Component<{\n    conversation: ConversationDto,\n    selected: boolean,\n    onSelect: () => void\n}> {\n    componentDidMount() {\n        proxy.addEventListener(\"message\", (cid, m) => {\n            if (cid === this.props.conversation.channelId) this.forceUpdate();\n        }, this);\n    }\n    componentWillUnmount() {\n        proxy.removeAllEventListener(this);\n    }\n    render() {\n        let lastMessage = this.props.conversation.lastMessages.length > 0 ?\n            this.props.conversation.lastMessages[this.props.conversation.lastMessages.length - 1] : null;\n        return (\n            <div className={\"conversation-card\" + (this.props.selected ? \" selected\" : \"\")}\n                onClick={() => this.props.onSelect()}> <div className=\"row\">\n                    <span className=\"channel-name\">{this.props.conversation.name}</span> <span className=\"time\">\n                        {lastMessage && new Date(lastMessage.timeStamp).toLocaleDateString()} </span>\n                </div>\n                <span className=\"last-message\">{lastMessage?.content}</span> </div>\n        );\n    }\n}","import { Component } from \"react\";\nimport { InboxDto, ConversationDto } from \"../chat\";\nimport { TextInputAndButton } from \"./TextInputAndButton\";\nimport React from \"react\";\nimport { ConversationCard } from \"./ConversationCard\";\nimport { proxy } from \"./Proxy\";\n\nexport class LeftPane extends Component<{\n    inbox: InboxDto, selectedConversation: ConversationDto | undefined, onSelect: (c: ConversationDto) => void\n}> {\n    sendContactRequest(email: string) {\n        proxy.sendPacket({ type: \"contactRequest\", email, firstMessage: \"Hello\" });\n        return true;\n    }\n    \n    componentDidMount() {\n        proxy.addEventListener(\"conversation\", c => this.forceUpdate(), this);\n    }\n    componentWillUnmount() {\n        proxy.removeAllEventListener(this);\n    }\n    render() {\n        return (\n            <div className=\"left-pane\">\n                <p className=\"my-tag\">My tag: {this.props.inbox.user.tag}</p> <TextInputAndButton type=\"text\" placeholder=\"Add user by Tag (Name#123)\"\n                    buttonContent=\"Inv\"\n                    onClick={text => this.sendContactRequest(text)} /> <div className=\"conversations\">\n                    {this.props.inbox.conversations.map(x => <ConversationCard\n                        key={x.channelId}\n                        conversation={x}\n                        selected={x === this.props.selectedConversation} onSelect={() => this.props.onSelect(x)} />)}\n                </div> </div>\n        );\n    }\n}","import { PureComponent } from \"react\";\nimport { MessageDto } from \"../chat\";\nimport React from \"react\";\n\nexport class MessageCard extends PureComponent<{ message: MessageDto, own: boolean }> {\n    render() {\n        return (\n            <div className={\"message-card\" + (this.props.own ? \" own\" : \"\")}>\n                <div className=\"bubble\">\n                    <span className=\"text\">{this.props.message.content}</span> <span className=\"time\">\n                        {new Date(this.props.message.timeStamp).toLocaleTimeString()} </span>\n                </div> </div>\n        );\n    }\n}","import { ConversationDto } from \"../chat\";\nimport { Component } from \"react\";\nimport { proxy } from \"./Proxy\";\nimport React from \"react\";\nimport { TextInputAndButton } from \"./TextInputAndButton\";\nimport { MessageCard } from \"./MessageCard\";\n\nexport class RightPane extends Component<{ conversation?: ConversationDto, onBack: () => void }> {\n    componentWillUnmount() {\n        proxy.removeAllEventListener(this);\n    }\n    onSend(text: string) {\n        proxy.sendPacket({ type: \"message\", channelId: this.props.conversation!.channelId, referenceTo: 0, contentType: 0, content: \"A: \" + text });\n        return true;\n    }\n    componentDidMount() {\n        proxy.addEventListener(\"message\", (cid, m) => {\n            if (cid === this.props.conversation?.channelId) this.forceUpdate();\n        }, this);\n    }\n    render() {\n        return (\n            <div className=\"right-pane column\">\n                {this.props.conversation && <>\n                    <div className=\"conversation-header row\">\n                        <button type=\"button\" className=\"only-narrow\"\n                        onClick={() => this.props.onBack()}>Back</button> <p>{this.props.conversation?.name}</p>\n                    </div>\n                    <div className=\"messages\">\n                        {this.props.conversation?.lastMessages.map(x => <MessageCard key={x.id} message={x}\n                            own={x.senderId === proxy.inbox?.user.id} />)} </div>\n                    <div className=\"send-message row\">\n                        <TextInputAndButton type=\"text\" placeholder=\"Type something awesome here...\"\n                            buttonContent=\"Send\" onClick={x => this.onSend(x)} /> </div>\n                </>\n                }\n            </div>\n        );\n    }\n}","import { Component } from \"react\";\nimport { ConversationDto } from \"../chat\";\nimport React from \"react\";\nimport { proxy } from './Proxy';\nimport { LeftPane } from \"./Leftpane\";\nimport { RightPane } from \"./RightPane\";\n\nexport class Main extends Component {\n    state = { selectedConversation: undefined as (ConversationDto | undefined) };\n    render() {\n        let className = \"main row \" + (this.state.selectedConversation ? \"right\" : \"left\");\n        return (\n            <div className={className}>\n                <LeftPane\n                inbox={proxy.inbox!}\n                selectedConversation={this.state.selectedConversation} onSelect={c => this.setState({ selectedConversation: c })} />\n                <RightPane conversation={this.state.selectedConversation}\n                    onBack={() => this.setState({ selectedConversation: undefined })} />\n            </div>);\n    }\n}","import React, { Component } from 'react';\nimport { Login } from './Login';\nimport {proxy} from './Proxy';\nimport {Main} from './Main';\n\nexport default class App extends Component\n{\n  state = { showLogin: true };\n  \n  componentDidMount()\n  {\n    proxy.addEventListener( \"login\", () => this.setState( { showLogin: false } ) );\n  }\n\n  render()\n  {    \n    return (\n      <div className=\"App\">\n        { this.state.showLogin ? <Login /> : <Main /> }\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}